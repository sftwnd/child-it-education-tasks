#include <iostream>
using namespace std;

// 8
// 41495

int main() {
    int size;
    cin >> size; // Читаем количество элементов
    int * m = new int[size]; // Создаём массив, куда зачитаем элементы
    long long summ = 0; // Сумма всех элементов
    int * s = new int[size]; s[0] = 0; // Создаём массив сумм
    int lim = size >> 1; // Целая часть половины размера
    for (int i=0; i< size; i++) {
        cin >> m[i]; // Читаем i-й элемент
        summ += m[i]; // Считаем сумму
        if (i < lim) s[0] += m[i]; // В первый элемент кладём сумму первой половины элементов
    }
    for (int i=1; i<size; i++) {
        s[i] = s[i-1] - m[i-1] + m[(i+lim-1)%size]; // В каждую i-ю сумму из предыдущего вычитаем m[i-1] и добавляем последний в наборе их lim элементов от i-го
    }
    long long minsumm = 0; // Задаём минимальную сумму 
    int minid = -1; // Сюда запишем найденый id с минимальной суммой
    long long val = 0; // Текущая сумма (для последнего элемента должна быть 0 и после пробежки по всем i мы должны получить 0 для val)
    bool odd = (size &1) == 1; // true, если колво элементов нечётное
    for (int i=0; i<size; i++) {
        val += - s[i] + (summ - s[i]); // Вычисляем изменение суммы при переходе от i-1 к i-й позиции для чётного кол-ва
        if (odd) val-=m[(i+lim)%size]; // Если нечётное кол-во элементов - удаляем значение через lim от i-го
        if (val < minsumm || minid == -1) { // Если нашли значение меньше текущего минимального или это первое значение
            minsumm = val; // Запоминаем найденную min сумму
            minid = i+1; // Запоминаем id, но не с 0, а с 1 (как просят в ответе)
        }
    }
    cout << minid << endl; // выводим результат
    return 0;
}